// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== Users & OAuth =====
model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  password        String?           // hashed password for credentials login
  image           String?
  accounts        Account[]
  journals        Journal[]
  moodRecords     MoodRecord[]
  recommendations Recommendation[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

// OAuth accounts (Google)
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int? 
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// ===== Journaling =====
model Journal {
  id        String     @id @default(cuid())
  userId    String
  content   String
  mood      String?
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  moodRecord MoodRecord?
}

// ===== Mood Records =====
model MoodRecord {
  id             String            @id @default(cuid())
  userId         String
  journalId      String?           @unique
  moodLabel      String
  moodScore      Float?
  createdAt      DateTime          @default(now())
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  journal        Journal?          @relation(fields: [journalId], references: [id], onDelete: Cascade)
  recommendations Recommendation[]
}

// ===== Recommendations =====
model Recommendation {
  id           String   @id @default(cuid())
  userId       String
  moodRecordId String?
  type         String
  content      Json
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  moodRecord   MoodRecord? @relation(fields: [moodRecordId], references: [id], onDelete: Cascade)
}
